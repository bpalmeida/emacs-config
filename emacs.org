
* General configurations
** Window configurations
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0)                                ; Disable the tooltips

  ;; (let ((filename "~/.emacs.d/f.org"))
  ;;   (when (file-exists-p filename)
  ;;     (setq initial-buffer-choice filename)))

#+END_SRC
   
** Configurations defaults
#+BEGIN_SRC emacs-lisp
    (setq-default
      ad-redefinition-action 'accept                   ; Silence warnings for redefinition
      auto-window-vscroll nil                          ; Lighten vertical scroll
      confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
      cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
      delete-by-moving-to-trash t                      ; Delete files to trash
      display-time-default-load-average nil            ; Don't display load average
      ; display-time-format "%H:%M"                      ; Format the time string
      fill-column 80                                   ; Set width for automatic line breaks
      help-window-select t                             ; Focus new help windows when opened
      indent-tabs-mode nil                             ; Stop using tabs to indent
      inhibit-startup-screen t                         ; Disable start-up screen
    ;  initial-scratch-message ""                       ; Empty the initial *scratch* buffer
    ;  mouse-yank-at-point t                            ; Yank at point rather than pointer
      ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
    ;  recenter-positions '(5 top bottom)               ; Set re-centering positions
      scroll-conservatively most-positive-fixnum       ; Always scroll by one line
    ;  scroll-margin 10                                 ; Add a margin when scrolling vertically
      select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
      sentence-end-double-space nil                    ; End a sentence after a dot and a space
      show-help-function nil                           ; Disable help messages
      show-trailing-whitespace nil                     ; Display trailing whitespaces
      ;; split-height-threshold nil                       ; Disable vertical window splitting
      ;; split-width-threshold nil                        ; Disable horizontal window splitting
      tab-width 4                                      ; Set width for tabs
      uniquify-buffer-name-style 'forward              ; Uniquify buffer names
      window-combination-resize t                      ; Resize windows proportionally
      x-stretch-cursor t                                ; Stretch cursor to the glyph width
    )                             
    ; (cd "~/")                                         ; Move to the user directory
    (delete-selection-mode 1)                         ; Replace region when inserting text
    ; (display-time-mode 1)                             ; Enable time in the mode-line
    ; (fringe-mode 0)                                   ; Disable fringes
    (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
    ;; (global-subword-mode 1)                           ; Iterate through CamelCase words
    ;; (mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
    ;; (put 'downcase-region 'disabled nil)              ; Enable downcase-region
    ;; (put 'upcase-region 'disabled nil)                ; Enable upcase-region
    (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding

    (global-auto-revert-mode t)
    (cua-mode t)
    (transient-mark-mode 1) ;; No region when it is not highlighted

    (column-number-mode 1) ;; enable column mode

    (setq read-buffer-completion-ignore-case t     ; ignore case on buffer completion
          read-file-name-completion-ignore-case t  ; ignore case on name completion
          cua-keep-region-after-copy t             ; Standard Windows behaviour
          cua-auto-tabify-rectangles nil           ; Don't tabify after rectangle commands
          auto-revert-interval 1                   ; Refresh buffers fast
          custom-file (make-temp-file "")                  ; Discard customization's
    )

    ;; Break on long lines
    ;; (setq-default truncate-lines nil)

    ;; backups to a specific folder
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 5    ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )

  (setq auto-save-file-name-transforms
            `((".*" ,temporary-file-directory t)))


  (setq create-lockfiles nil)

#+END_SRC

** Mode line (write a new one)
#+BEGIN_SRC emacs-lisp
(setq mode-line-modes nil)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'atom-one-dark t)


  ;; (defun cycle-themes ()
  ;;   "Returns a function that lets you cycle your themes."
  ;;   (lexical-let ((themes '#1=(atom-one-dark doom-one . #1#)))
  ;;     (lambda ()
  ;;       (interactive)
  ;;       ;; Rotates the thme cycle and changes the current theme.
  ;;       (load-theme (car (setq themes (cdr themes))) t)
  ;;       (message (concat "Switched to " (symbol-name (car themes)))))))

  ;; (global-set-key (kbd "M-1") 'cycle-themes)

#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
(set-frame-font "FiraCode 13" nil t)
(set-face-attribute 'mode-line nil :font "Source Code Pro-12")
#+END_SRC
  

* TODO Secrets
  #+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "secrets.org" user-emacs-directory))
#+END_SRC


* Languages
** Haskell
#+BEGIN_SRC emacs-lisp

  ; Some key bindings
  ; C-c C-l to load a file
  ; C-c C-z switch to Haskell interpreter (starts one if needed)
  ; C-c C-t *:type* for symbol at point
  ; M-. Go to definition
  ; ...

  (use-package haskell-mode :ensure t)
  (require 'haskell-mode)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  (add-to-list 'load-path "~/.emacs.d/hs-lint/")
  (require 'hs-lint)
  (defun my-haskell-mode-hook ()
    (local-set-key "\C-cl" 'hs-lint))
  (add-hook 'haskell-mode-hook 'my-haskell-mode-hook)

  (setenv "PATH" (concat "~/.local/bin:" (getenv "PATH")))

  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)

  ;; hslint on the command line only likes this indentation mode;
  ;; alternatives commented out below.
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

  ;; With flymake
  ;; (use-package flymake-easy :ensure t)
  ;; (use-package flymake-hlint :ensure t)
  ;; (require 'flymake-hlint)
  ;; (add-hook 'haskell-mode-hook 'flymake-hlint-load)

  ;; With Flycheck
  (add-to-list 'exec-path "~/.local/bin/") ; same as the output of *$ which hlint* or "$ whereis hlint"
  (use-package flycheck-haskell :ensure t)
  (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)

  (with-eval-after-load 'flycheck (flycheck-pos-tip-mode)) ;; popup errors

  ;; stack install brittany
  (use-package format-all :ensure t)
  (defun haskell-mode-format-hook () (local-set-key (kbd "C-c C-f") 'format-all-buffer))
  (add-hook 'haskell-mode-hook 'haskell-mode-format-hook)
  ;; Temporarily commented out functions *define-format-all-formatter hindent* and
  ;; define-format-all-formatter stylish-haskell on
  ;; ~/.emacs.d/elpa/format-all-20201123.839/format-all.el
  ;; in order to select automatically brittany
  ;; check the repo https://github.com/lassik/emacs-format-all-the-code
  ;; for changes

#+END_SRC
** FreeST
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/freest-mode/")
(require 'freest-mode)`
(add-to-list 'auto-mode-alist '("\\.fst\\'" . freest-mode))
#+END_SRC
** Java
#+BEGIN_SRC emacs-lisp

  (use-package lsp-java :ensure t)
  (require 'lsp-java)
  (add-hook 'java-mode-hook 'lsp)



  (use-package yasnippet :config (yas-global-mode))
  (use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration))
    :config (setq lsp-completion-enable-additional-text-edit nil))
  (use-package lsp-ui)
  (use-package which-key :config (which-key-mode))
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  (use-package dap-java :ensure nil)
  (use-package helm-lsp)
  (use-package helm
    :config (helm-mode))
  (use-package lsp-treemacs)

#+END_SRC

** Agda
#+BEGIN_SRC emacs-lisp
  '(agda2-program-args (quote ("-i . -i /usr/share/Agda-stdlib/src/")))
  ;; (load-file (let ((coding-system-for-read 'utf-8))
  ;;                 (shell-command-to-string "agda-mode locate")))

  '(agda2-highlight-datatype-face ((t (:foreground "#E6DB74"))))
  '(agda2-highlight-field-face ((t (:foreground "#A6E22E"))))
  '(agda2-highlight-function-face ((t (:foreground "#A6E22E"))))
  '(agda2-highlight-inductive-constructor-face ((t (:foreground "#F92672"))))
  '(agda2-highlight-keyword-face ((t (:foreground "#66D9EF"))))
  '(agda2-highlight-module-face ((t (:foreground "#AE81FF"))))
  '(agda2-highlight-number-face ((t (:foreground "#AE81FF"))))
  '(agda2-highlight-postulate-face ((t (:foreground "#E6DB74"))))
  '(agda2-highlight-primitive-face ((t (:foreground "#CE4045"))))
  '(agda2-highlight-primitive-type-face ((t (:foreground "#E6DB74"))))

#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
    ;; (require 'auto-complete-auctex)
;    (load "auctex.el" nil t t)
    (use-package auctex :ensure t)
  
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-PDF-mode t)
    (setq-default TeX-master nil) ; ask for master
    (setq TeX-save-query nil)     ; Don't ask for saving a file

    ; always start the server for inverse search
    (setq TeX-source-correlate-mode t)
    (setq-default TeX-source-correlate-start-server t)


#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp

  (require 'ox-latex)
  (require 'ox-beamer)

  (use-package org-bullets :ensure t)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switch)

  ;; Set evince as the default application for org pdfs
  (setq org-file-apps
    (quote ((auto-mode . emacs)
            ("\\.pdf\\'" . "evince %s"))))

  (setq org-src-fontify-natively t)

  ;; ORG REVEAL

  (use-package ox-reveal :ensure ox-reveal) (require 'ox-reveal) 
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize :ensure t)

#+END_SRC

#+RESULTS:

** TODO Bash
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode :ensure t)  
  (require 'go-mode)
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode :ensure t)  
  (require 'rust-mode)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode :ensure t)  
  (require 'python-mode)
;; more on repo
#+END_SRC
** Promela
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/promela-mode/")
  (require 'promela-mode)
  (add-to-list 'auto-mode-alist '("\\.pml\\'" . promela-mode))
      ;; more on repo
#+END_SRC
   
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :ensure t)  
  (require 'markdown-mode)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :ensure t)  
  (require 'yaml-mode)
  (use-package yaml-mode :mode "\\.yml\\'")
#+END_SRC
** TODO Lisp
#+BEGIN_SRC emacs-lisp
#+END_SRC


* Features
** Auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company :ensure t)  
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)


  (setq company-idle-delay 0) ; No delay in showing suggestions.
  ; Show suggestions after entering one character.
  (setq company-minimum-prefix-length 3)
  (setq company-selection-wrap-around t)
;  (company-tng-configure-default) ;; REMOVED


  ;; haskell company
  (add-hook 'haskell-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends)
                 (append '((company-capf company-dabbrev-code))
                         company-backends))))

#+END_SRC
** Buffers and Windows
#+BEGIN_SRC emacs-lisp

  (use-package transpose-frame :ensure t)  
  (require 'transpose-frame)
  (global-set-key (kbd "C-|") 'transpose-frame)

  (use-package buffer-move :ensure t)  
  (require 'buffer-move)
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)


#+END_SRC
** Spelling
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-popup :ensure t)  
  (require 'flyspell-correct-popup)
  (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)

  (setq flyspell-sort-corrections nil)
  (setq flyspell-doublon-as-error-flag nil) ; considers that a word repeated twice is an error - Disable
  (autoload 'tex-mode-flyspell-verify "flyspell" "" t)

  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode) ;; comments and strings
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)

;; switch between pt and en dictionaries
  (defun fd-switch-dictionary() 
    (interactive)
    (let* ((dic ispell-current-dictionary)
  	  (change (if (string= dic "pt_PT") "en" "pt_PT")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))

  (global-set-key (kbd "<f8>") 'flyspell-buffer)
  (global-set-key (kbd "<f9>")   'fd-switch-dictionary)

#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :ensure t)  
  (require 'flycheck)
  (use-package flycheck
    :hook
    ((emacs-lisp-mode . flycheck-mode)
    (haskell-mode . flycheck-mode))
    :custom
    (flycheck-check-syntax-automatically '(save mode-enabled))
    (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (flycheck-display-errors-delay .3))
#+END_SRC

** TODO Diff
#+BEGIN_SRC emacs-lisp
  (use-package ediff-wind
    :ensure nil
    :custom
    (ediff-split-window-function #'split-window-horizontally)
    (ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC
** Parentheses 
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
; (setq show-paren-style 'expression) ;; highlight the entire expression
; '(show-paren-match ((((class color) (background light)) (:background "azure2")))) ;; change color
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure t)  
  (require 'projectile)
  (use-package projectile
    :hook
    (after-init . projectile-global-mode)
    :init
    (setq-default
     projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
     projectile-known-projects-file (expand-file-name ".projectile-bookmarks" user-emacs-directory))
    :custom
    (projectile-enable-caching t))
#+END_SRC
** Indentation (TODO: hooks)
#+BEGIN_SRC emacs-lisp
;; add hooks for the remaining languages
  ;; (require 'aggressive-indent)
  ;; (add-hook 'haskell-mode-hook #'aggressive-indent-mode)

;; dont work very well for haskell
  (use-package haskell-tab-indent :ensure t)  
  (require 'haskell-tab-indent)


#+END_SRC
** Treemacs (TODO: git)
#+BEGIN_SRC emacs-lisp

  (use-package treemacs :ensure t)  
  (require 'treemacs)
  (global-set-key (kbd "M-2") 'treemacs)
  (treemacs-resize-icons 12)
  (setq treemacs-show-hidden-files nil)

  (use-package treemacs-projectile :ensure t)  
  (require 'treemacs-projectile)

;; w for new width

#+END_SRC
** Undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree :ensure t)  
  (require 'undo-tree)
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-y") 'redo)

#+END_SRC

** Duplicate lines
#+BEGIN_SRC emacs-lisp

(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)

(defun duplicate-region()
  (interactive)
  (let ((min-pos (min (region-beginning) (region-end)))
        (max-pos (max (region-beginning) (region-end))))      
    (copy-region-as-kill min-pos max-pos)
    (goto-char max-pos)
    (open-line 1)
    (forward-line 1)
    (yank)
   )
 )


(defun duplicate ()
  (interactive)
  (if (use-region-p)
      (duplicate-region)
      (duplicate-line)
  )
)

(global-set-key (kbd "M-d") 'duplicate)

#+END_SRC
** Wakatime
 #+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode :ensure t)  
  (require 'wakatime-mode)
  (global-wakatime-mode)
  (setq wakatime-api-key wakatime-key
       wakatime-cli-path "/usr/bin/wakatime" 
       wakatime-python-bin nil)

 #+END_SRC

** Version Control
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)  
  (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC
** Hydra 
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)  
  (require 'counsel)
  (use-package counsel-projectile :ensure t)  
  (require 'counsel-projectile)
  (use-package hydra :ensure t)  
  (require 'hydra)

  (use-package hydra
    :preface
    (defvar-local me/ongoing-hydra-body nil)
    (defun me/ongoing-hydra ()
      (interactive)
      (if me/ongoing-hydra-body
          (funcall me/ongoing-hydra-body)
        (user-error "me/ongoing-hydra: me/ongoing-hydra-body is not set")))
    :bind
    ;; ("C-c d" . hydra-dates/body)
    ;; ("C-c e" . hydra-eyebrowse/body)
    ("C-c f" . hydra-flycheck/body)
    ("C-c g" . hydra-magit/body)
    ;; ("C-c i" . hydra-ivy/body)
    ;; ("C-c o" . me/ongoing-hydra)
    ("C-c p" . hydra-projectile/body)
    ;; ("C-c s" . hydra-system/body)
    ;; ("C-c w" . hydra-windows/body)
    :custom
    (hydra-default-hint nil))
#+END_SRC
*** Hydra-projectile
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-projectile (:color blue)
  "
  ^
  ^Projectile^        ^Buffers^           ^Find^              ^Search^
  ^──────────^────────^───────^───────────^────^──────────────^──────^────────────
  _q_ quit            _b_ list            _d_ directory       _r_ replace
  _i_ reset cache     _K_ kill all        _D_ root            _R_ regexp replace
  ^^                  _S_ save all        _f_ file            _s_ rg
  ^^                  ^^                  _p_ project         ^^
  ^^                  ^^                  ^^                  ^^
  "
    ("q" nil)
    ("b" counsel-projectile-switch-to-buffer)
    ("d" counsel-projectile-find-dir)
    ("D" projectile-dired)
    ("f" counsel-projectile-find-file)
    ("i" projectile-invalidate-cache :color red)
    ("K" projectile-kill-buffers)
    ("p" counsel-projectile-switch-project)
    ("r" projectile-replace)
    ("R" projectile-replace-regexp)
    ("s" counsel-projectile-rg)
    ("S" projectile-save-project-buffers))


#+END_SRC
** Quality of live
*** Open todo list
#+BEGIN_SRC emacs-lisp  
  (defun open-todo-list ()
    (interactive)
    (find-file todo-path) ;path to my todo list
  )

  (global-set-key (kbd "M-3") 'open-todo-list)
#+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp  
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("latex" (or (mode . latex-mode) (mode . bibtex-mode)))
                 ("magit" (or (mode . magit-mode)
                              (name . "^magit.*$")))
                 ("bash" (or (mode . eshell-mode) 
                              (mode . shell-mode)
                              (mode . sh-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("haskell" (mode . haskell-mode))
                 ("freest" (name . "^.*fst$"))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))

  ;; do not show empty groups
  (setq ibuffer-show-empty-filter-groups nil)

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

#+END_SRC

** Keep track of opened buffers
#+BEGIN_SRC emacs-lisp     
   (savehist-mode 1)		   						; save my mini-buffer history in Emacs
#+END_SRC   
** Emacs server
#+BEGIN_SRC emacs-lisp
  ; start a server to open files on the running instance
  ; starts unless it is already an instance
  ; changed my desktop entry to invoke emacsclient
  (unless (server-running-p) (server-start)) 
#+END_SRC 
** Save Emacs session
#+BEGIN_SRC emacs-lisp   
  (desktop-save-mode 1) 
#+END_SRC
** COMMENT Mail
#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "mail.org" user-emacs-directory))
#+END_SRC

** TODO COMMENT Agenda
#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "agenda.org" user-emacs-directory))
#+END_SRC




* TODO More/packages to check
** TODO Client to open files here
** COMMENT Dictionary
#+BEGIN_SRC emacs-lisp
  (use-package google-translate :ensure t)  
  (require     'google-translate)
;; (use-package google-translate)
#+END_SRC
   
** TODO Alerts
#+BEGIN_SRC emacs-lisp
#+END_SRC
** More
  - Hydra (flycheck, more)
  - mu4e-conversation
  - mu4e-alert 
  - markdown-preview-mode 
  - opam 
  - dumb-jump 
  - auto-complete  
  - htmlize 
  - bash-completion 
  - org-readme 
  - visual-fill 
  - org-gcal 
  - server/client
  - dropbox on startup
